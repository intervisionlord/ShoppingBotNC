"""–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–æ–π"""

from aiogram import Router, types, F

# from handlers.handler_logging import logger
from handlers.handler_nc_deck import get_shopping_cards, update_card_description
from handlers.bot_routes.route_utils import parse_new_items
from handlers.bot_routes.route_states import CardCallback
from handlers.bot_routes.route_list_cards import list_handler
from handlers.bot_routes.route_common import create_card_keyboard

view_router = Router()


@view_router.callback_query(CardCallback.filter(F.action == "view"))
async def view_card_handler(
    callback: types.CallbackQuery, callback_data: CardCallback
) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞"""
    cards = await get_shopping_cards()
    if not cards:
        await callback.message.edit_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    card = next((c for c in cards if c.id == callback_data.card_id), None)
    if not card:
        await callback.message.edit_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    items = card.get_list_items()
    keyboard_builder = create_card_keyboard(card, items)

    card_text = f"<b>{card.title}</b>\n\n"
    if items:
        card_text += f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}\n\n"
    else:
        card_text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n\n"

    card_text += "üí° <i>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</i>\n"
    card_text += "<i>‚Ä¢ –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç</i>\n"
    card_text += "<i>‚Ä¢ –ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</i>"

    await callback.message.edit_text(
        card_text, reply_markup=keyboard_builder.as_markup(), parse_mode="HTML"
    )
    await callback.answer()


@view_router.message()
async def handle_message_input(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith("/"):
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
    cards = await get_shopping_cards()
    if not cards:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ
    if len(cards) == 1:
        card = cards[0]
        await _add_items_to_card(message, card)
        return

    # –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞–∫ fallback
    card = cards[0]
    await _add_items_to_card(message, card)


async def _add_items_to_card(message: types.Message, card) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É"""
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    new_items = parse_new_items(message.text)
    if not new_items:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    current_items = card.get_list_items()
    updated_items = current_items + new_items

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    new_description = card.update_list_items(updated_items)
    success = await update_card_description(card.id, new_description)

    if success:
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ '{card.title}'")
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º list_handler –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        await list_handler(message)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
