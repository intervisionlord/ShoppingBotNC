"""–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–æ–π"""

from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.handler_nc_deck import get_shopping_cards, update_card_description
from handlers.bot_routes.states import CardCallback
from handlers.bot_routes.route_list_cards import list_handler
from handlers.handler_logging import logger

view_router = Router()

MAX_ITEM_PREVIEW_LENGTH = 50
ELLIPSIS_LENGTH = 3

# –ü—Ä–æ—Å—Ç–æ–π –∫—ç—à –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
_card_cache = {}


@view_router.callback_query(CardCallback.filter(F.action == "view"))
async def view_card_handler(
    callback: types.CallbackQuery, callback_data: CardCallback
) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞

    :param callback: Callback –∑–∞–ø—Ä–æ—Å
    :type callback: types.CallbackQuery
    :param callback_data: –î–∞–Ω–Ω—ã–µ callback
    :type callback_data: CardCallback
    """
    cards = await get_shopping_cards()
    if not cards:
        await callback.message.edit_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    target_card = next(
        (card for card in cards if card.id == callback_data.card_id), None
    )
    if not target_card:
        await callback.message.edit_text("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ö—ç—à–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    _card_cache[callback_data.card_id] = target_card

    await _show_card_view(callback.message, target_card)
    await callback.answer()


async def _show_card_view(message: types.Message, card) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏
    :type message: types.Message
    :param card: –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    items = card.get_list_items()
    keyboard_builder = InlineKeyboardBuilder()

    for index, item in enumerate(items):
        description = card.description or ""
        lines = description.split("\n")
        EMOJI_CHECKED = "‚úÖ"
        EMOJI_UNCHECKED = "üî≥"

        emoji = (
            EMOJI_CHECKED
            if index < len(lines) and "[x]" in lines[index]
            else EMOJI_UNCHECKED
        )

        display_item = item
        if len(item) > MAX_ITEM_PREVIEW_LENGTH:
            display_item = item[: MAX_ITEM_PREVIEW_LENGTH - ELLIPSIS_LENGTH] + "..."

        keyboard_builder.button(
            text=f"{emoji} {display_item}",
            callback_data=CardCallback(
                action="toggle", card_id=card.id, item_index=index
            ),
        )

    if items:
        keyboard_builder.button(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
            callback_data=CardCallback(action="remove", card_id=card.id),
        )

    keyboard_builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CardCallback(action="back"))
    keyboard_builder.adjust(1)

    card_text = await _generate_card_text(card.title, items)

    if hasattr(message, "edit_text"):
        await message.edit_text(
            card_text, reply_markup=keyboard_builder.as_markup(), parse_mode="HTML"
        )
    else:
        await message.answer(
            card_text, reply_markup=keyboard_builder.as_markup(), parse_mode="HTML"
        )


async def _generate_card_text(title: str, items: list) -> str:
    """
    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏

    :param title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    :type title: str
    :param items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :type items: list
    :return: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    :rtype: str
    """
    if items:
        items_text = f"–≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}\n\n"
    else:
        items_text = "üìù –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç\n\n"

    return f"""<b>{title}</b>

{items_text}
üí° <i>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º:</i>
<i>‚Ä¢ –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç</i>
<i>‚Ä¢ –ò–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</i>"""


@view_router.message()
async def handle_message_input(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    :param message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :type message: types.Message
    """
    if message.text.startswith("/"):
        return

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {message.text}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if _card_cache:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫—ç—à–∞ (—Å–∞–º—ã–π —á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π - –æ–¥–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞)
        target_card = next(iter(_card_cache.values()))
        await _add_items_to_card(message, target_card)
    else:
        # Fallback - –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –µ—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç
        cards = await get_shopping_cards()
        if not cards:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫")
            return
        target_card = cards[0]
        await _add_items_to_card(message, target_card)


async def _parse_new_items(text: str) -> list:
    """
    –ü–∞—Ä—Å–∏—Ç –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞

    :param text: –¢–µ–∫—Å—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    :type text: str
    :return: –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    :rtype: list
    """
    ITEM_SEPARATOR = ","

    new_items_text = text.strip()
    if not new_items_text:
        return []

    if ITEM_SEPARATOR in new_items_text:
        return [
            item.strip()
            for item in new_items_text.split(ITEM_SEPARATOR)
            if item.strip()
        ]
    return [new_items_text]


async def _add_items_to_card(message: types.Message, card) -> None:
    """
    –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∫–∞—Ä—Ç–æ—á–∫—É

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    :type message: types.Message
    :param card: –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    new_items = await _parse_new_items(message.text)
    if not new_items:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return

    logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {new_items}")

    current_items = card.get_list_items()
    updated_items = current_items + new_items
    new_description = card.update_list_items(updated_items)

    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ {card.id}: {len(updated_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    success = await update_card_description(card.id, new_description)

    if success:
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ '{card.title}'")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        card.description = new_description
        _card_cache[card.id] = card
        await list_handler(message)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")


async def get_cached_card(card_id: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∫—ç—à–∞

    :param card_id: ID –∫–∞—Ä—Ç–æ—á–∫–∏
    :type card_id: int
    :return: –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ None
    """
    return _card_cache.get(card_id)
