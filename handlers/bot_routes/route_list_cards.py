"""–õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫"""

from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.handler_logging import logger
from handlers.handler_nc_deck import get_shopping_cards
from handlers.bot_routes.route_states import CardCallback

list_router = Router()


@list_router.message(CommandStart())
@list_router.message(Command("help"))
async def start_help_handler(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    help_text = """
üõí –ë–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫

–ö–æ–º–∞–Ω–¥—ã:
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∫—É–ø–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–æ–∫!
"""
    await message.answer(help_text)


@list_router.message(Command("list"))
async def list_handler(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫")

    # –í—Å–µ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    cards = await get_shopping_cards()

    if cards is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫")
        return

    if not cards:
        await message.answer("üìù –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç")
        return

    keyboard_builder = InlineKeyboardBuilder()
    for card in cards:
        keyboard_builder.button(
            text=f"üìã {card.short_title}",
            callback_data=CardCallback(action="view", card_id=card.id),
        )

    keyboard_builder.adjust(1)
    await message.answer(
        f"üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ ({len(cards)}):",  # noqa: E231
        reply_markup=keyboard_builder.as_markup(),
    )


@list_router.callback_query(CardCallback.filter(F.action == "back"))
async def back_to_list_handler(
    callback: types.CallbackQuery, callback_data: CardCallback
) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç–æ—á–µ–∫"""
    del callback_data
    await callback.answer()
    await list_handler(callback.message)
