"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫"""

from aiogram import Router, types
from aiogram.filters import Command

from handlers.handler_logging import logger
from handlers.handler_nc_deck import get_decks

nc_deck_router = Router()


@nc_deck_router.message(Command("decks"))
async def command_get_decks(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫

    :param message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :type message: types.Message
    """
    logger.info(
        f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} "
        f"({message.from_user.username})"
    )
    decks = await get_decks()
    if decks is not None:
        await message.answer(
            "<b>üóÉÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å–∫–∏:</b>\n\n"
            f"{'\n'.join([f'    üóÇÔ∏è {deck.title}' for deck in decks])}",
            parse_mode="HTML",
        )
    else:
        await message.answer("‚ùå –î–æ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
