"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫"""

from aiogram import Router, types
from aiogram.filters import Command

from handlers.handler_logging import logger
from handlers.handler_nc_deck import get_boards, get_stacks

nc_deck_router = Router()


@nc_deck_router.message(Command("decks"))
async def command_get_decks(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫

    :param message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :type message: types.Message
    """
    logger.info(
        f"–ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} "
        f"({message.from_user.username})"
    )
    decks = await get_boards()
    if decks is not None:
        await message.answer(
            "<b>üóÉÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å–∫–∏:</b>\n\n"
            f"{'\n'.join([f'    üóÇÔ∏è {deck.title}' for deck in decks])}",
            parse_mode="HTML",
        )
    else:
        await message.answer("‚ùå –î–æ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")


@nc_deck_router.message(Command("stacks"))
async def command_get_stacks(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ—Ç–≤–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–µ–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–æ—Å–∫–∏

    :param message: –û—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :type message: types.Message
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    command_args = message.text.split()

    if len(command_args) < 2:
        await message.answer(
            "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –¥–æ—Å–∫–∏\n\n"
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/stacks &lt;board_id&gt;</code>\n\n"
            "üîç –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫ —Å –∏—Ö ID, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/decks</code>",
            parse_mode="HTML",
        )
        return

    try:
        board_id = int(command_args[1])
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –¥–æ—Å–∫–∏\n\n"
            "üìù ID –¥–æ—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\n"
            "üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/decks</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å–æ–∫",
            parse_mode="HTML",
        )
        return

    logger.info(
        f"–ó–∞–ø—Ä–æ—à–µ–Ω—ã —Å—Ç–µ–∫–∏ –¥–æ—Å–∫–∏ {board_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} "
        f"({message.from_user.username})"
    )

    stacks = await get_stacks(board_id)
    if stacks is not None and stacks:
        stacks_list = "\n".join([f"    üìë {stack.title}" for stack in stacks])
        await message.answer(
            f"<b>üìö –°—Ç–µ–∫–∏ –¥–æ—Å–∫–∏ {board_id}:</b>\n\n{stacks_list}",  # noqa: E231
            parse_mode="HTML",
        )
    else:
        await message.answer(f"‚ùå –°—Ç–µ–∫–∏ –¥–ª—è –¥–æ—Å–∫–∏ {board_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
