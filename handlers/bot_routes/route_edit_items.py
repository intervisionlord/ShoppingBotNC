"""–õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏"""

from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

# from handlers.handler_logging import logger
from handlers.handler_nc_deck import get_shopping_cards, update_card_description
from handlers.bot_routes.route_states import CardCallback
from handlers.bot_routes.route_view_card import view_card_handler

edit_router = Router()


@edit_router.callback_query(CardCallback.filter(F.action == "toggle"))
async def toggle_item_handler(
    callback: types.CallbackQuery, callback_data: CardCallback
) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞"""
    cards = await get_shopping_cards()
    if not cards:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    card = next((c for c in cards if c.id == callback_data.card_id), None)
    if not card or not card.description:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    lines = card.description.split("\n")
    if 0 <= callback_data.item_index < len(lines):
        line = lines[callback_data.item_index]

        if "[ ]" in line:
            lines[callback_data.item_index] = line.replace("[ ]", "[x]")
        elif "[x]" in line:
            lines[callback_data.item_index] = line.replace("[x]", "[ ]")

        success = await update_card_description(card.id, "\n".join(lines))
        if success:
            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
            await view_card_handler(callback, callback_data)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    else:
        await callback.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")


@edit_router.callback_query(CardCallback.filter(F.action == "remove"))
async def remove_items_handler(
    callback: types.CallbackQuery, callback_data: CardCallback
) -> None:
    """–ù–∞—á–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    cards = await get_shopping_cards()
    if not cards:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    card = next((c for c in cards if c.id == callback_data.card_id), None)
    if not card:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    items = card.get_list_items()
    if not items:
        await callback.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return

    keyboard_builder = InlineKeyboardBuilder()
    for index, item in enumerate(items):
        keyboard_builder.button(
            text=f"üóëÔ∏è {item}",
            callback_data=CardCallback(
                action="delete", card_id=card.id, item_index=index
            ),
        )

    keyboard_builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=CardCallback(action="view", card_id=card.id)
    )
    keyboard_builder.adjust(1)

    await callback.message.edit_text(
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=keyboard_builder.as_markup(),
        parse_mode="HTML",
    )
    await callback.answer()


@edit_router.callback_query(CardCallback.filter(F.action == "delete"))
async def delete_item_handler(
    callback: types.CallbackQuery, callback_data: CardCallback
) -> None:
    """–£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
    cards = await get_shopping_cards()
    if not cards:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    card = next((c for c in cards if c.id == callback_data.card_id), None)
    if not card or not card.description:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    lines = card.description.split("\n")
    if 0 <= callback_data.item_index < len(lines):
        lines.pop(callback_data.item_index)
        success = await update_card_description(card.id, "\n".join(lines))

        if success:
            await callback.answer("‚úÖ –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            updated_cards = await get_shopping_cards()
            updated_card = next((c for c in updated_cards if c.id == card.id), None)
            if updated_card:
                await remove_items_handler(callback, callback_data)
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    else:
        await callback.answer("‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
